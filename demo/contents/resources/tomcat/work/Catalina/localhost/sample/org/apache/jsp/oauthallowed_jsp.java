/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M19
 * Generated at: 2017-06-07 23:58:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class oauthallowed_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


   private String normalize(String value)
   {
      StringBuffer sb = new StringBuffer();
      for (int i = 0; i < value.length(); i++) {
         char c = value.charAt(i);
         sb.append(c);
         if (c == ';')
            sb.append("<br>");
      }
      return sb.toString();
   }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/custom.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

                HashMap headerMap = new HashMap();
                Enumeration eNames = request.getHeaderNames();
                while (eNames.hasMoreElements()) {
                String name = (String) eNames.nextElement();
                if (name.startsWith("http_"))
                {
                        String value = normalize(request.getHeader(name));
                        headerMap.put(name, value);
                }}

      out.write("\r\n");
      out.write("<div class=\"muck-up\">\r\n");
      out.write("  <div class=\"overlay\"></div>\r\n");
      out.write("  <div class=\"top\">\r\n");
      out.write("    <div class=\"nav\">\r\n");
      out.write("      <span class=\"ion-android-menu\"></span>\r\n");
      out.write("      <p>Timeline</p>\r\n");
      out.write("      &nbsp;&nbsp;&nbsp;<a href=\"oauthlogout.jsp\">Logout</a>\r\n");
      out.write("      <span class=\"ion-ios-more-outline\"></span>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"user-profile\">\r\n");
      out.write("      <img src=\"https://raw.githubusercontent.com/arjunamgain/FilterMenu/master/images/profile.jpg\">\r\n");
      out.write("      <div class=\"user-details\">\r\n");
      out.write("        <h4>");
      out.print( headerMap.get("http_name") );
      out.write("</h4>\r\n");
      out.write("        <p>");
      out.print( headerMap.get("http_title") );
      out.write("</p>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("  <div class=\"clearfix\"></div>\r\n");
      out.write("  <div class=\"filter-btn\">\r\n");
      out.write("    <a id=\"one\" href=\"#\"><i class=\"ion-ios-checkmark-outline\"></i></a>\r\n");
      out.write("    <a id=\"two\" href=\"#\"><i class=\"ion-ios-alarm-outline\"></i></a>\r\n");
      out.write("    <a id=\"three\" href=\"#\"><i class=\"ion-ios-heart-outline\"></i></a>\r\n");
      out.write("    <a id=\"all\" href=\"#\"><i class=\"ion-ios-star-outline\"></i></a>\r\n");
      out.write("    <span class=\"toggle-btn ion-android-funnel\"></span>\r\n");
      out.write("  </div>\r\n");
      out.write("  <div class=\"clearfix\"></div>\r\n");
      out.write("  <div class=\"bottom\">\r\n");
      out.write("    <div class=\"title\">\r\n");
      out.write("      <h3>My Tasks</h3>\r\n");
      out.write("      <small>February 8,2015</small>\r\n");
      out.write("    </div>\r\n");
      out.write("    <ul class=\"tasks\">\r\n");
      out.write("      <li class=\"one red\">\r\n");
      out.write("        <span class=\"task-title\">Make New Icon</span>\r\n");
      out.write("        <span class=\"task-time\">5pm</span>\r\n");
      out.write("        <span class=\"task-cat\">Web App</span>\r\n");
      out.write("\r\n");
      out.write("      </li>\r\n");
      out.write("      <li class=\"one red\">\r\n");
      out.write("        <span class=\"task-title\">Catch up with Brian</span>\r\n");
      out.write("        <span class=\"task-time\">3pm</span>\r\n");
      out.write("        <span class=\"task-cat\">Mobile Project</span>\r\n");
      out.write("\r\n");
      out.write("      </li>\r\n");
      out.write("      <li class=\"two green\">\r\n");
      out.write("        <span class=\"task-title\">Design Explorations</span>\r\n");
      out.write("        <span class=\"task-time\">2pm</span>\r\n");
      out.write("        <span class=\"task-cat\">Company Web site</span>\r\n");
      out.write("\r\n");
      out.write("      </li>\r\n");
      out.write("      </li>\r\n");
      out.write("      <li class=\"tow green hang\">\r\n");
      out.write("        <span class=\"task-title\">Team Meeting</span>\r\n");
      out.write("        <span class=\"task-time\">2pm</span>\r\n");
      out.write("        <span class=\"task-cat\">Hangouts</span>\r\n");
      out.write("        <img src=\"https://raw.githubusercontent.com/arjunamgain/FilterMenu/master/images/2.jpg\">\r\n");
      out.write("        <img src=\"https://raw.githubusercontent.com/arjunamgain/FilterMenu/master/images/3.jpg\">\r\n");
      out.write("        <img src=\"https://raw.githubusercontent.com/arjunamgain/FilterMenu/master/images/profile.jpg\">\r\n");
      out.write("      </li>\r\n");
      out.write("      <li class=\"three yellow\">\r\n");
      out.write("        <span class=\"task-title\">New Projects</span>\r\n");
      out.write("        <span class=\"task-time\">2pm</span>\r\n");
      out.write("        <span class=\"task-cat\">Starting</span>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      </li>\r\n");
      out.write("\r\n");
      out.write("      <li class=\"three yellow\">\r\n");
      out.write("        <span class=\"task-title\">Lunch with Mary</span>\r\n");
      out.write("        <span class=\"task-time\">2pm</span>\r\n");
      out.write("        <span class=\"task-cat\">Grill House</span>\r\n");
      out.write("      </li>\r\n");
      out.write("      <li class=\"three yellow\">\r\n");
      out.write("        <span class=\"task-title\">Team Meeting</span>\r\n");
      out.write("        <span class=\"task-time\">2pm</span>\r\n");
      out.write("        <span class=\"task-cat\">Hangouts</span>\r\n");
      out.write("      </li>\r\n");
      out.write("\r\n");
      out.write("    </ul>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
